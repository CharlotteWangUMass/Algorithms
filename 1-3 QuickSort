// Quick Sort is a divide-and-conquer algorithm. Usually, an element is taken as pivot to do sorting.
// Pivot could be the first element / last element / median / random element in an array.
// For instance, there are two indices i and j divide an array into three parts.
// The left part of the array is [0, ..., i) contains all the elements that are less than pivot.
// The middle part of the array is [i, j) contains all the elements that are unknown.
// The right part of the array is [j, ..., n-1) contains all the elements that are greater than pivot.
// Put the values that are less than the pivot on the left of pivot. Put the values that are greater than the pivot to the right of the pivot.
// Partition Algorithm is adopted to implemnt Quick Sort. 
// Step 1: Start from the leftmost element and keep track of index i. If (a[i]<current element), swap current element with a[i].
// Step 2: Choose the rightmost element as pivot, because there are three divided regions in the array: [a[0],a[i]), [a[i],a[j]), [a[j],a[n-1])

//Implementation (recursion) of QuickSort in Java.
public class quickSort {
    /* Partition Algorithm */
    public int partition(int[] a, int left, int right) {
        int pivot = a[right];
        int i = left - 1;
        for (int j = left; j < right; j++) {
            if (a[j] < pivot) {
                i++;
                // swap the value of a[i] and a[j]; a[j] is smaller
                int temp = a[i];
                a[i] = a[j];
                a[j] = temp;
            }
        }
        // swap the value of a[i+1] and a[high]
        int temp = a[i + 1];  // assign the value of temp to a[i + 1]
        a[i + 1] = a[right];  // assign the value of a[i+1] to a[right]/pivot
        a[right] = temp;      // assign the value of a[right]/pivot to temp/a[i+1]
        return i + 1;         // traverse begin from a[i+1]
    }

    /* Sort */
    public void sort(int[] a, int left, int right) {
        if (left < right) {
            int k = partition(a, left, right);  // Index k is partitioning index.
            sort(a, left, k - 1);  // Recursively sort elements before k.
            sort(a, k + 1, right); // Recursively sort elements after k.
        }
    }

    /* A utility funtion to print array of size n. */
    public static void printArray(int[] a) {
        int n = a.length;
        for (int i = 0; i < n; i++) {
            System.out.print(a[i] + " ");
        }
        System.out.println();
    }

    /* Main method to text program. */
    public static void main(String[] args) {
        int[] a = { 9, 6, 20, -8, 35, 7 };
        int n = a.length;

        quickSort ob = new quickSort();
        ob.sort(a, 0, n - 1);

        System.out.println("Sorted Array");
        printArray(a);
    }
}
