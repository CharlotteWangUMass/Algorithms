// MergeSort is a divide-and-conquer algorithm
// Using a recursive way to implement MergeSort in Java
// Time Complexity: O(n*log(n))
// Space Complexity: O(n), because we created two new subarrays to store two temporary subarrays.

public class mergeSort {
    //Merge two subarrays of int[] a
    //Method 'merge()'. Input an array a; three indeices of array a: left, middle and right
    public void merge(int[] a, int left, int middle, int right) {
        //Calculate the sizes of two subarrays
        int n1 = middle - left + 1;
        int n2 = right - middle - 1 + 1;
        //Create two new temporary arrays to store the two subarrays. Extra memory used is O(n).
        int[] leftPart = new int[n1];
        int[] rightPart = new int[n2];
        //Seperately copy each element to corresponding subarrays
        for (int i = 0; i < n1; i++) {
            leftPart[i] = a[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightPart[j] = a[middle + 1 + j];
        }

        /* Merge two subarrays.*/
        //Initialize three indices. 'i' and 'j' for two subarrays; 'k' for merged array.
        int i = 0;
        int j = 0;
        int k = 1;
        while (i < n1 && j < n2) {
            if (leftPart[i] <= rightPart[j]) {
                a[k] = leftPart[i];
                i++;
            }
            else {
                a[k] = rightPart[j];
                j++;
            }
            k++;
        }

        /* Copy Remaining elements of leftPart[] and rightPart[] if any.*/
        while (i < n1) {
            a[k] = leftPart[i];
            i++;
            k++;
        }
        while (j < n2) {
            a[k] = rightPart[j];
            j++;
            k++;
        }
    }

    /* Main function used to sort a[left, ..., middle, ..., right]*/
    public void sort(int[] a, int left, int right) {
        if (left < right) {
            //Find the middle point.
            int middle = left + (right - left) / 2;
            //Sort the first and second halves.
            sort(a, left, middle);
            sort(a, middle + 1, right);
            //Merge two sorted halves.
            merge(a, left, middle, right);
        }
    }

    /* Print array of size n. */
    public static void printArray(int[] a) {
        int n = a.length;
        for (int i = 0; i < n; i++) {
            System.out.print(a[i] + " ");      // System.out.print(a.size()); -> Space Complexity: O(1)
        }
        System.out.println();
    }

    /* Testing method */
    public static void main(String[] args) {
        int[] a = { 9, 1, 2, 4, 6, -9, -7 };
        System.out.println("Given Array");
        printArray(a);

        mergeSort ob = new mergeSort();
        ob.sort(a, 0, a.length - 1);

        System.out.println("Sorted Array");
        printArray(a);
    }
}
