// Binary Search.
// Problem: How to find k closest elements to target in a given sorted array.
// Time Complexity: O(log(n) + k).
// Space Complexity: O(k).

import java.util.Arrays;

public class BinarySearchKClosestElements {
    public int[] kClosest(int[] a, int target, int k) {
        if (a == null || a.length == 0) {
            return a;
        }
        if (k == 0) {
            return new int[0];
        }
        int left = largestSmallerEqual(a, target);
        int right = left + 1;
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            if (right >= a.length || left >= 0 && target - a[left] <= a[right] - target) {
                result[i] = a[left--];
            }
            else {
                result[i] = a[right++];
            }
        }
        return result;
    }

    private int largestSmallerEqual(int[] a, int target) {
        int left = 0;
        int right = a.length - 1;
        while (left < right - 1) {
            int middle = left + (right - left) / 2;
            if (a[middle] <= target) {
                left = middle;
            }
            if (a[middle] > target) {
                right = middle;
            }
        }
        if (a[right] <= target) {
            return right;
        }
        if (a[left] <= target) {
            return left;
        }
        return -1;
    }

    public static void main(String[] args) {
        BinarySearchKClosestElements ob = new BinarySearchKClosestElements();
        int[] a = { 1, 2, 3, 4, 4, 5, 6, 6, 7 };
        int target = 8;
        int k = 2;
        int[] output = ob.kClosest(a, target, k);
        if (output == null || output.length == 0) {
            System.out.println("There is no closest element found in given array.");
        }
        else {
            System.out.println(
                    "There are " + k + " elements found in given array: " + Arrays
                            .toString(output));
        }
    }
}
