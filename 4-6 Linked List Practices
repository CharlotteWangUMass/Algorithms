// Problem1: How to find the middle node in a n-element Linked List?
// Solution: If the size of a Linked List is n, half of the size is n/2.
// Step1: Evaluate if head is null.
// Step2: Create two new fields: slow and fast. Each jump for slow is one node. Each jump for fast is two nodes.
//        If the fast runs to the end of the Linked List, slow runs to half of the Linked List.
// Time Complexity: O(n).
// Space Complexity: O(1).

// Implementation in Java.

public class LinkedListMiddleNode {
    public ListNode findMiddle(ListNode head) {
        if (head == null) {
            return head;
        }

        ListNode slow = head; // Initialize slow to head.
        ListNode fast = head; // Initializze fast to head.

        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }
}
