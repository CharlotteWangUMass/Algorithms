// Problem 2: How to determine if a binary tree is a balanced binary tree.
// Balanced Bianry Tree: is a binary tree that for every node in the tree, 
// the difference between the height of left-subtree and the height of right-subtree is less than or equal to 1.
// Solution: a Boolean method.
// Step1: Evaluate if the root of this tree is null.
// Step2: If not null, for every node, call getHeight(root.left) and getHeight(root.right) to get the heights of left-subtree and right-subtree.
// Step3: If the difference between the height of left-subtree and the height of right-subtree is less than or equal to 1,
//        the tree is a Balanced Binary Tree. If not, the tree is NOT a Balanced Binary Tree.
// Keep in mind: it is a recursive process. Remeber the recursion rule is appropriate for every node.

// Implementation in Java - Solution 1.
// Time Complexity: O(n * height)
// Space Complexity: O(height). Worset case: O(n) <-- there are n nodes and n layers.

public class TreeIfBanlancedBinaryTree {
    public boolean isBBT(TreeNode root) {
        if (root == null) {             // BaseCase in a tree: the value of each node in last layer is null.
            return true;
        }

        if (Math.abs(getHeight(root.left) - getHeight(root.right)) <= 1) {
            return true;
        }
        else {
            return false;
        }
    }

    public int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }

        return 1 + Math.max(getHeight(root.left), getHeight(root.right));
    }
}
